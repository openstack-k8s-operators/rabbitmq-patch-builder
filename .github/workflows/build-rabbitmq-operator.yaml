name: build RabbitMQ upstream
on:
  push:
  pull_request:
  schedule:
    - cron:  '45 * * * *'

env:
  imageregistry: 'quay.io'
  imagenamespace: ${{ secrets.IMAGENAMESPACE || secrets.QUAY_USERNAME }}
  latesttag: latest

jobs:

  check-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check secrets are set
        id: have-secrets
        if: "${{ env.imagenamespace != '' }}"
        run: echo "::set-output name=ok::true"
    outputs:
      have-secrets: ${{ steps.have-secrets.outputs.ok }}

  check-build-tag:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout rabbitmq-cluster-operator repository
      uses: actions/checkout@v4
      with:
        repository: rabbitmq/cluster-operator
        ref: v2.16.1

    - name: Checkout patches (this repo)
      uses: actions/checkout@v4
      with:
        path: ./patch-repo

    - name: Set GIT_REV
      run:
        pushd "${GITHUB_WORKSPACE}/patch-repo" && echo "GIT_REV=$(git rev-parse HEAD)" >> $GITHUB_ENV

    - name: Query tag
      id: query-tag
      run:
        echo "::set-output name=tag::$(skopeo list-tags docker://${{ env.imageregistry }}/${{ env.imagenamespace }}/rabbitmq-cluster-operator-index | grep ${{ env.GIT_REV}} | sed -e 's|^[[:space:]]*||' || true)"

    outputs:
      tag: ${{ steps.query-tag.outputs.tag }}

  build-rabbitmq-cluster-operator:
    name: Build rabbitmq-cluster-operator image using buildah
    runs-on: ubuntu-latest
    needs: [check-secrets, check-build-tag]
    if: needs.check-secrets.outputs.have-secrets == 'true' && needs.check-build-tag.outputs.tag == ''

    steps:
    - name: Checkout rabbitmq-cluster-operator repository
      uses: actions/checkout@v4
      with:
        repository: rabbitmq/cluster-operator
        ref: v2.16.1

    - name: Checkout patches (this repo)
      uses: actions/checkout@v4
      with:
        path: ./patch-repo

    - name: Set GIT_REV
      run:
        pushd "${GITHUB_WORKSPACE}/patch-repo" && echo "GIT_REV=$(git rev-parse HEAD)" >> $GITHUB_ENV

    - name: apply patches
      run: |
        pushd "${GITHUB_WORKSPACE}"
        for PATCH in $(ls "${GITHUB_WORKSPACE}/patch-repo/patches/"); do
          patch -p1 < "${GITHUB_WORKSPACE}/patch-repo/patches/${PATCH}"
        done
        popd

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v5

    - name: Set latest tag for non main branch
      if: "${{ steps.branch-name.outputs.current_branch != 'main' }}"
      run: |
        echo "latesttag=${{ steps.branch-name.outputs.current_branch }}-latest" >> $GITHUB_ENV

    - name: Buildah Action
      id: build-rabbitmq-cluster-operator
      uses: redhat-actions/buildah-build@v2
      with:
        image: rabbitmq-cluster-operator
        tags: ${{ env.latesttag }} ${{ env.GIT_REV}}
        containerfiles: |
          ./Dockerfile

    - name: Push rabbitmq-cluster-operator To ${{ env.imageregistry }}
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-rabbitmq-cluster-operator.outputs.image }}
        tags: ${{ steps.build-rabbitmq-cluster-operator.outputs.tags }}
        registry: ${{ env.imageregistry }}/${{ env.imagenamespace }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

  build-rabbitmq-cluster-operator-bundle:
    needs: [ check-secrets, build-rabbitmq-cluster-operator ]
    name: rabbitmq-cluster-operator-bundle
    runs-on: ubuntu-latest
    if: needs.check-secrets.outputs.have-secrets == 'true'

    steps:
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24.x

    - name: Install yj (needed by make manifests)
      run: |
        curl -fL "https://github.com/sclevine/yj/releases/download/v5.1.0/yj-linux-amd64" -o /usr/local/bin/yj
        chmod +x /usr/local/bin/yj

    - name: Checkout rabbitmq-cluster-operator repository
      uses: actions/checkout@v4
      with:
        repository: rabbitmq/cluster-operator
        ref: v2.16.1

    - name: Checkout patches (this repo)
      uses: actions/checkout@v4
      with:
        path: ./patch-repo

    - name: Set GIT_REV
      run:
        pushd "${GITHUB_WORKSPACE}/patch-repo" && echo "GIT_REV=$(git rev-parse HEAD)" >> $GITHUB_ENV

    - name: apply patches
      run: |
        pushd "${GITHUB_WORKSPACE}"
        for PATCH in $(ls "${GITHUB_WORKSPACE}/patch-repo/patches/"); do
          patch -p1 < "${GITHUB_WORKSPACE}/patch-repo/patches/${PATCH}"
        done
        popd

    - name: Install operator-sdk
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        source: github
        operator-sdk: '1.31.0'

    - name: Log in to Quay Registry
      uses: redhat-actions/podman-login@v1
      with:
        registry: ${{ env.imageregistry }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Log in to Red Hat Registry
      uses: redhat-actions/podman-login@v1
      with:
        registry: registry.redhat.io
        username: ${{ secrets.REDHATIO_USERNAME }}
        password: ${{ secrets.REDHATIO_PASSWORD }}

    - name: Create bundle image
      run: |
        pushd "${GITHUB_WORKSPACE}"/patch-repo/.github/
        chmod +x "create_bundle.sh"
        "./create_bundle.sh"
        popd
      env:
        REGISTRY:  ${{ env.imageregistry }}/${{ env.imagenamespace }}
        GIT_REV: ${{ env.GIT_REV}}
        BASE_IMAGE: rabbitmq-cluster-operator

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v7

    - name: Set latest tag for non main branch
      if: "${{ steps.branch-name.outputs.current_branch != 'main' }}"
      run: |
        echo "latesttag=${{ steps.branch-name.outputs.current_branch }}-latest" >> $GITHUB_ENV

    - name: Build rabbitmq-cluster-operator-bundle using buildah
      id: build-rabbitmq-cluster-operator-bundle
      uses: redhat-actions/buildah-build@v2
      with:
        image: rabbitmq-cluster-operator-bundle
        tags: ${{ env.latesttag }} ${{ env.GIT_REV}}
        containerfiles: |
          ./bundle.Dockerfile

    - name: Push rabbitmq-cluster-operator To ${{ env.imageregistry }}
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-rabbitmq-cluster-operator-bundle.outputs.image }}
        tags: ${{ steps.build-rabbitmq-cluster-operator-bundle.outputs.tags }}
        registry:  ${{ env.imageregistry }}/${{ env.imagenamespace }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

  build-rabbitmq-cluster-operator-index:
    needs: [ check-secrets, build-rabbitmq-cluster-operator-bundle ]
    name: rabbitmq-cluster-operator-index
    runs-on: ubuntu-latest
    if: needs.check-secrets.outputs.have-secrets == 'true'

    steps:
    - name: Checkout rabbitmq-cluster-operator repository
      uses: actions/checkout@v4
      with:
        repository: rabbitmq/cluster-operator
        ref: v2.16.1

    - name: Checkout patches (this repo)
      uses: actions/checkout@v4
      with:
        path: ./patch-repo

    - name: Set GIT_REV
      run:
        pushd "${GITHUB_WORKSPACE}/patch-repo" && echo "GIT_REV=$(git rev-parse HEAD)" >> $GITHUB_ENV

    - name: apply patches
      run: |
        pushd "${GITHUB_WORKSPACE}"
        for PATCH in $(ls "${GITHUB_WORKSPACE}/patch-repo/patches/"); do
          patch -p1 < "${GITHUB_WORKSPACE}/patch-repo/patches/${PATCH}"
        done
        popd

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v5

    - name: Set latest tag for non main branch
      if: "${{ steps.branch-name.outputs.current_branch != 'main' }}"
      run: |
        echo "latesttag=${{ steps.branch-name.outputs.current_branch }}-latest" >> $GITHUB_ENV

    - name: Install opm
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        source: github
        opm: 'latest'

    - name: Log in to Red Hat Registry
      uses: redhat-actions/podman-login@v1
      with:
        registry: ${{ env.imageregistry }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Create index image
      run: |
        pushd "${GITHUB_WORKSPACE}"/patch-repo/.github/
        chmod +x "create_opm_index.sh"
        "./create_opm_index.sh"
        popd
      env:
        REGISTRY:  ${{ env.imageregistry }}/${{ env.imagenamespace }}
        GIT_REV: ${{ env.GIT_REV}}
        BUNDLE_IMAGE: rabbitmq-cluster-operator-bundle
        INDEX_IMAGE_TAG: ${{ env.latesttag }}
        INDEX_IMAGE: rabbitmq-cluster-operator-index

    - name: Push rabbitmq-cluster-operator-index To ${{ env.imageregistry }}
      uses: redhat-actions/push-to-registry@v2
      with:
        image: rabbitmq-cluster-operator-index
        tags: ${{ env.latesttag }} ${{ env.GIT_REV}}
        registry:  ${{ env.imageregistry }}/${{ env.imagenamespace }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}
